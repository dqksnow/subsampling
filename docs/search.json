[{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://dqksnow.github.io/subsampling/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-logit.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"`ssp.glm`: Subsampling for Generalized Linear Models","text":"can install development version subsampling GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"dqksnow/Subsampling\") library(subsampling)"},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-logit.html","id":"terminology","dir":"Articles","previous_headings":"","what":"Terminology","title":"`ssp.glm`: Subsampling for Generalized Linear Models","text":"Full dataset: whole dataset used input. Full data estimator: estimator obtained fitting model full dataset. Subsample: subset observations drawn full dataset. Subsample estimator: estimator obtained fitting model subsample. Subsampling probability (π\\pi): probability assigned observation inclusion subsample.","code":""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-logit.html","id":"example-logistic-regression-with-simulated-data","dir":"Articles","previous_headings":"","what":"Example: Logistic Regression with Simulated Data","title":"`ssp.glm`: Subsampling for Generalized Linear Models","text":"introduce usage ssp.glm simulated data. XX contains d=6d=6 covariates drawn multinormal distribution, YY binary response variable. full dataset size N=1×104N = 1 \\times 10^4.","code":"set.seed(1) N <- 1e4 beta0 <- rep(-0.5, 7) d <- length(beta0) - 1 corr <- 0.5 sigmax  <- matrix(corr, d, d) + diag(1-corr, d) X <- MASS::mvrnorm(N, rep(0, d), sigmax) colnames(X) <- paste(\"V\", 1:ncol(X), sep = \"\") P <- 1 - 1 / (1 + exp(beta0[1] + X %*% beta0[-1])) Y <- rbinom(N, 1, P) data <- as.data.frame(cbind(Y, X)) formula <- Y ~ . head(data) #>   Y         V1         V2          V3          V4          V5         V6 #> 1 1 -1.0918680 -0.4462684 -0.02250989 -0.19626329 -0.67460551 -0.4392570 #> 2 0 -0.1591053 -0.4748068  0.46515238  0.88370061 -0.05910325  0.1857218 #> 3 1 -1.6260754 -0.3394421 -0.68490712 -0.55721107  0.01024563 -0.6319413 #> 4 0  0.1251949  1.5113247  1.38931519  1.24287417  2.48829727  0.5534888 #> 5 0  0.1931921 -0.1478401 -0.14788926  0.46973556  0.05205022  1.0907459 #> 6 0 -0.2560258 -1.6065024  0.32710042 -0.04590727 -0.94748664 -1.2310368"},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-logit.html","id":"key-arguments","dir":"Articles","previous_headings":"","what":"Key Arguments","title":"`ssp.glm`: Subsampling for Generalized Linear Models","text":"function usage core functionality ssp.glm revolves around three key questions: subsampling probabilities computed? (Controlled criterion argument) subsample drawn? (Controlled sampling.method argument) likelihood adjusted correct bias? (Controlled likelihood argument)","code":"ssp.glm(   formula,   data,   subset = NULL,   n.plt,   n.ssp,   family = \"quasibinomial\",   criterion = \"optL\",   sampling.method = \"poisson\",   likelihood = \"weighted\",   control = list(...),   contrasts = NULL,   ...   )"},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-logit.html","id":"criterion","dir":"Articles","previous_headings":"Key Arguments","what":"criterion","title":"`ssp.glm`: Subsampling for Generalized Linear Models","text":"choices criterion include optA, optL(default), LCC uniform. optimal subsampling criterion optA optL derived minimizing asymptotic covariance subsample estimator, proposed Wang, Zhu, Ma (2018). LCC uniform baseline methods.","code":""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-logit.html","id":"sampling-method","dir":"Articles","previous_headings":"Key Arguments","what":"sampling.method","title":"`ssp.glm`: Subsampling for Generalized Linear Models","text":"options sampling.method argument include withReplacement poisson (default). withReplacement stands drawing n.ssp subsamples full dataset replacement, using specified subsampling probabilities. poisson stands drawing subsamples one one comparing subsampling probability realization uniform random variable U(0,1)U(0,1). expected number drawn samples n.ssp. details see Wang (2019).","code":""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-logit.html","id":"likelihood","dir":"Articles","previous_headings":"Key Arguments","what":"likelihood","title":"`ssp.glm`: Subsampling for Generalized Linear Models","text":"available choices likelihood include weighted (default) logOddsCorrection. likelihood functions can derive unbiased estimator. Theoretical results indicate logOddsCorrection efficient weighted context logistic regression. See Wang Kim (2022).","code":""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-logit.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"`ssp.glm`: Subsampling for Generalized Linear Models","text":"drawing subsample, ssp.glm utilizes survey::svyglm fit model subsample, eventually uses glm. Arguments accepted svyglm can passed ... ssp.glm. two examples demonstrating use ssp.glm different configurations. recommended survey::svyglm, working binomial models, advisable use use family=quasibinomial() avoid warning issued glm. Refer svyglm() help documentation Details. ‘quasi’ version family objects provide point estimates.","code":"n.plt <- 200 n.ssp <- 600 ssp.results <- ssp.glm(formula = formula,                        data = data,                        n.plt = n.plt,                        n.ssp = n.ssp,                        family = \"quasibinomial\",                        criterion = \"optL\",                        sampling.method = \"withReplacement\",                        likelihood = \"weighted\"                        ) summary(ssp.results) #> Model Summary #>  #> Call: #>  #> ssp.glm(formula = formula, data = data, n.plt = n.plt, n.ssp = n.ssp,  #>     family = \"quasibinomial\", criterion = \"optL\", sampling.method = \"withReplacement\",  #>     likelihood = \"weighted\") #>  #> Subsample Size: #>                                 #> 1       Total Sample Size 10000 #> 2 Expected Subsample Size   600 #> 3   Actual Subsample Size   600 #> 4   Unique Subsample Size   561 #> 5  Expected Subample Rate    6% #> 6    Actual Subample Rate    6% #> 7    Unique Subample Rate 5.61% #>  #> Coefficients: #>  #>           Estimate Std. Error z value Pr(>|z|) #> Intercept  -0.5876     0.0867 -6.7749  <0.0001 #> V1         -0.4725     0.1053 -4.4865  <0.0001 #> V2         -0.5252     0.1109 -4.7357  <0.0001 #> V3         -0.4789     0.1037 -4.6193  <0.0001 #> V4         -0.6400     0.1090 -5.8705  <0.0001 #> V5         -0.4937     0.1155 -4.2737  <0.0001 #> V6         -0.6226     0.1125 -5.5368  <0.0001 ssp.results <- ssp.glm(formula = formula,                        data = data,                        n.plt = n.plt,                        n.ssp = n.ssp,                        family = \"quasibinomial\",                        criterion = \"optA\",                        sampling.method = \"poisson\",                        likelihood = \"logOddsCorrection\"                        ) summary(ssp.results) #> Model Summary #>  #> Call: #>  #> ssp.glm(formula = formula, data = data, n.plt = n.plt, n.ssp = n.ssp,  #>     family = \"quasibinomial\", criterion = \"optA\", sampling.method = \"poisson\",  #>     likelihood = \"logOddsCorrection\") #>  #> Subsample Size: #>                                 #> 1       Total Sample Size 10000 #> 2 Expected Subsample Size   600 #> 3   Actual Subsample Size   634 #> 4   Unique Subsample Size   634 #> 5  Expected Subample Rate    6% #> 6    Actual Subample Rate 6.34% #> 7    Unique Subample Rate 6.34% #>  #> Coefficients: #>  #>           Estimate Std. Error z value Pr(>|z|) #> Intercept  -0.5052     0.0775 -6.5171  <0.0001 #> V1         -0.4788     0.0992 -4.8288  <0.0001 #> V2         -0.4893     0.0985 -4.9662  <0.0001 #> V3         -0.4037     0.0997 -4.0485  <0.0001 #> V4         -0.6308     0.0988 -6.3844  <0.0001 #> V5         -0.5781     0.1029 -5.6208  <0.0001 #> V6         -0.4679     0.1001 -4.6747  <0.0001"},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-logit.html","id":"returned-object","dir":"Articles","previous_headings":"Outputs","what":"Returned object","title":"`ssp.glm`: Subsampling for Generalized Linear Models","text":"object returned ssp.glm contains estimation results indices drawn subsample full dataset. key returned variables: index.plt index row indices drawn pilot subsamples optimal subsamples full data. coef.ssp subsample estimator β\\beta coef linear combination coef.plt (pilot estimator) coef.ssp. cov.ssp cov estimated covariance matrices coef.ssp coef. coefficients standard errors printed summary() coef square root diag(cov). See help documentation ssp.glm details.","code":"names(ssp.results) #>  [1] \"model.call\"            \"coef.plt\"              \"coef.ssp\"              #>  [4] \"coef\"                  \"cov.ssp\"               \"cov\"                   #>  [7] \"index.plt\"             \"index\"                 \"N\"                     #> [10] \"subsample.size.expect\" \"terms\""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-logit.html","id":"other-families","dir":"Articles","previous_headings":"","what":"Other Families","title":"`ssp.glm`: Subsampling for Generalized Linear Models","text":"also provide examples poisson regression gamma regression help documentation ssp.glm. Note likelihood = logOddsCorrection currently implemented logistic regression (family = binomial quasibonomial).","code":""},{"path":[]},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-quantreg.html","id":"terminology","dir":"Articles","previous_headings":"","what":"Terminology","title":"`ssp.quantreg`: Subsampling for Quantile Regression","text":"Full dataset: whole dataset used input. Full data estimator: estimator obtained fitting model full dataset. Subsample: subset observations drawn full dataset. Subsample estimator: estimator obtained fitting model subsample. Subsampling probability (π\\pi): probability assigned observation inclusion subsample.","code":""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-quantreg.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"`ssp.quantreg`: Subsampling for Quantile Regression","text":"introduce ssp.quantreg simulated data. XX contains d=6d=6 covariates drawn multinormal distribution YY response variable. full data size N=1×104N = 1 \\times 10^4. interested quantile τ=0.75\\tau=0.75.","code":"set.seed(1) N <- 1e4 tau <- 0.75 beta.true <- rep(1, 7) d <- length(beta.true) - 1 corr  <- 0.5 sigmax  <- matrix(0, d, d) for (i in 1:d) for (j in 1:d) sigmax[i, j] <- corr^(abs(i-j)) X <- MASS::mvrnorm(N, rep(0, d), sigmax) err <- rnorm(N, 0, 1) - qnorm(tau) Y <- beta.true[1] + X %*% beta.true[-1] + err * rowMeans(abs(X)) data <- as.data.frame(cbind(Y, X)) colnames(data) <- c(\"Y\", paste(\"V\", 1:ncol(X), sep=\"\")) formula <- Y ~ . head(data) #>            Y         V1          V2          V3         V4         V5 #> 1  3.0813580 -0.1825325 -0.01613791 -0.01852406  1.0672454  0.9353870 #> 2  0.1114953 -0.3829652 -1.20674035 -0.33354934  0.3818526  0.6610612 #> 3  4.0233475 -0.1384141  0.35758454 -0.08962728  0.8591475  0.7554356 #> 4 -7.0116774 -0.7668158 -1.07028901 -2.57374497 -1.4283868 -0.4782146 #> 5 -1.2551700 -0.9557206 -0.82219260  0.47905721  0.1096016 -0.3116279 #> 6  2.6764218  0.8646208 -0.32527175  0.23441106  0.5800169  1.8153229 #>            V6 #> 1  0.44382164 #> 2  0.12626628 #> 3  1.63208199 #> 4  1.10717085 #> 5 -0.08180055 #> 6 -0.03612645"},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-quantreg.html","id":"key-arguments","dir":"Articles","previous_headings":"","what":"Key Arguments","title":"`ssp.quantreg`: Subsampling for Quantile Regression","text":"function usage core functionality ssp.quantreg revolves around three key questions: subsampling probabilities computed? (Controlled criterion argument) subsample drawn? (Controlled sampling.method argument) likelihood adjusted correct bias? (Controlled likelihood argument)","code":"ssp.quantreg(   formula,   data,   subset = NULL,   tau = 0.5,   n.plt,   n.ssp,   B = 5,   boot = TRUE,   criterion = \"optL\",   sampling.method = \"withReplacement\",   likelihood = c(\"weighted\"),   control = list(...),   contrasts = NULL,   ... )"},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-quantreg.html","id":"criterion","dir":"Articles","previous_headings":"Key Arguments","what":"criterion","title":"`ssp.quantreg`: Subsampling for Quantile Regression","text":"criterion stands criterion choose compute sampling probability observation. choices criterion include optL(default) uniform. optL, optimal subsampling probability minimizing transformation asymptotic variance subsample estimator. uniform baseline method.","code":""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-quantreg.html","id":"sampling-method","dir":"Articles","previous_headings":"Key Arguments","what":"sampling.method","title":"`ssp.quantreg`: Subsampling for Quantile Regression","text":"options sampling.method argument include withReplacement (default) poisson. withReplacement stands drawing n.sspn.ssp subsamples full dataset replacement, using specified subsampling probabilities. poisson stands drawing subsamples one one comparing subsampling probability realization uniform random variable U(0,1)U(0,1). expected number drawn samples n.sspn.ssp.","code":""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-quantreg.html","id":"likelihood","dir":"Articles","previous_headings":"Key Arguments","what":"likelihood","title":"`ssp.quantreg`: Subsampling for Quantile Regression","text":"available choice likelihood ssp.quantreg weighted. takes inverse sampling probabblity weights likelihood function correct bias introduced unequal subsampling probabilities.","code":""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-quantreg.html","id":"boot-and-b","dir":"Articles","previous_headings":"Key Arguments","what":"boot and B","title":"`ssp.quantreg`: Subsampling for Quantile Regression","text":"option drawing BB subsamples (expected size n.ssp) deriving subsample estimator asymptotic covariance matrix based . getting β̂b\\hat{\\beta}_{b} bb-th subsample, b=1,…Bb=1,\\dots B, calculates β̂=1B∑b=1Bβ̂b \\hat{\\beta}_I = \\frac{1}{B} \\sum_{b=1}^{B} \\hat{\\beta}_{b}  final subsample estimator V̂(β̂)=1refB(B−1)∑b=1B(β̂b−β̂)⊗2, \\hat{V}(\\hat{\\beta}_I) = \\frac{1}{r_{ef} B (B - 1)}  \\sum_{b=1}^{B} \\left( \\hat{\\beta}_{b} - \\hat{\\beta}_I  \\right)^{\\otimes 2},  refr_{ef} correction term effective subsample size since observations subsample can replicated. details, see Wang Ma (2021).","code":""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-quantreg.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"`ssp.quantreg`: Subsampling for Quantile Regression","text":"drawing subsample(s), ssp.quantreg utilizes quantreg::rq fit model subsample(s). Arguments accepted quantreg::rq can passed ... ssp.quantreg. two examples demonstrating use ssp.quantreg different configurations.","code":"B <- 5 n.plt <- 200 n.ssp <- 200 ssp.results1 <- ssp.quantreg(formula,                               data,                               tau = tau,                               n.plt = n.plt,                              n.ssp = n.ssp,                              B = B,                               boot = TRUE,                               criterion = 'optL',                              sampling.method = 'withReplacement',                               likelihood = 'weighted'                              )  ssp.results2 <- ssp.quantreg(formula,                               data,                               tau = tau,                               n.plt = n.plt,                              n.ssp = n.ssp,                              B = B,                               boot = FALSE,                               criterion = 'optL',                              sampling.method = 'withReplacement',                               likelihood = 'weighted'                              )"},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-quantreg.html","id":"returned-object","dir":"Articles","previous_headings":"Outputs","what":"Returned object","title":"`ssp.quantreg`: Subsampling for Quantile Regression","text":"returned object contains estimation results index drawn subsample full dataset. key returned variables: index.plt index row indices drawn pilot subsamples optimal subsamples full data. coef.ssp subsample estimator β\\beta coef linear combination coef.plt (pilot estimator) coef.ssp. cov.ssp cov estimated covariance matrices coef.ssp coef. boot=FALSE, covariance matrix estimated size n.ssp * B subsample drawn. See help documentation ssp.quantreg details.","code":"names(ssp.results1) #> [1] \"model.call\"            \"coef.plt\"              \"coef\"                  #> [4] \"cov\"                   \"index.plt\"             \"index.ssp\"             #> [7] \"N\"                     \"subsample.size.expect\" \"terms\" summary(ssp.results1) #> Model Summary #>  #>  #> Call: #>  #> ssp.quantreg(formula = formula, data = data, tau = tau, n.plt = n.plt,  #>     n.ssp = n.ssp, B = B, boot = TRUE, criterion = \"optL\", sampling.method = \"withReplacement\",  #>     likelihood = \"weighted\") #>  #> Subsample Size: #> [1] 1000 #>  #> Coefficients: #>  #>           Estimate Std. Error z value Pr(>|z|) #> Intercept   0.9753     0.0324 30.0654  <0.0001 #> V1          0.9701     0.0220 44.1763  <0.0001 #> V2          1.0295     0.0394 26.1369  <0.0001 #> V3          0.9980     0.0209 47.8506  <0.0001 #> V4          0.9834     0.0609 16.1529  <0.0001 #> V5          1.0508     0.0301 34.8848  <0.0001 #> V6          0.9441     0.0327 28.8878  <0.0001 summary(ssp.results2) #> Model Summary #>  #>  #> Call: #>  #> ssp.quantreg(formula = formula, data = data, tau = tau, n.plt = n.plt,  #>     n.ssp = n.ssp, B = B, boot = FALSE, criterion = \"optL\", sampling.method = \"withReplacement\",  #>     likelihood = \"weighted\") #>  #> Subsample Size: #> [1] 1000 #>  #> Coefficients: #>  #>           Estimate #> Intercept   0.9510 #> V1          1.0234 #> V2          1.0562 #> V3          1.0221 #> V4          0.9676 #> V5          0.9698 #> V6          1.0445"},{"path":[]},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-relogit.html","id":"terminology","dir":"Articles","previous_headings":"","what":"Terminology","title":"`ssp.relogit`: Subsampling for Logistic Regression Model with Rare Events","text":"Full dataset: whole dataset used input. Full data estimator: estimator obtained fitting model full dataset. Subsample: subset observations drawn full dataset. Subsample estimator: estimator obtained fitting model subsample. Subsampling probability (π\\pi): probability assigned observation inclusion subsample. Rare events: Observations Y=1Y=1 (positive instances). Non-rare events: Observations Y=0Y=0 (negative instances). idea subsampling methods follows: instead fitting model size NN full dataset, subsampling probability assigned observation smaller, informative subsample drawn. model fitted subsample obtain estimator reduced computational cost. face logistic regression rare events, Wang, Zhang, Wang (2021) shows available information ties number positive instances instead full data size. Based insight, one can keep rare instances perform subsampling non-rare instances reduce computational cost.","code":""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-relogit.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"`ssp.relogit`: Subsampling for Logistic Regression Model with Rare Events","text":"introduce basic usage using ssp.relogit simulated data. XX contains d=6d=6 covariates drawn multinormal distribution YY binary response variable. full data size N=2×104N = 2 \\times 10^4. Denote N1=sum(Y)N_{1}=sum(Y) counts rare observations N0=N−N1N_{0} = N - N_{1} counts non-rare observations.","code":"set.seed(2) N <- 2 * 1e4 beta0 <- c(-6, -rep(0.5, 6)) d <- length(beta0) - 1 X <- matrix(0, N, d) corr <- 0.5 sigmax <- corr ^ abs(outer(1:d, 1:d, \"-\")) X <- MASS::mvrnorm(n = N, mu = rep(0, d), Sigma = sigmax) Y <- rbinom(N, 1, 1 - 1 / (1 + exp(beta0[1] + X %*% beta0[-1]))) print(paste('N: ', N)) #> [1] \"N:  20000\" print(paste('sum(Y): ', sum(Y))) #> [1] \"sum(Y):  266\" n.plt <- 200 n.ssp <- 1000 data <- as.data.frame(cbind(Y, X)) colnames(data) <- c(\"Y\", paste(\"V\", 1:ncol(X), sep=\"\")) formula <- Y ~ ."},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-relogit.html","id":"key-arguments","dir":"Articles","previous_headings":"","what":"Key Arguments","title":"`ssp.relogit`: Subsampling for Logistic Regression Model with Rare Events","text":"function usage core functionality ssp.glm revolves around three key questions: subsampling probabilities computed? (Controlled criterion argument) subsample drawn? likelihood adjusted correct bias? (Controlled likelihood argument) Different ssp.glm can choose withReplacement poisson option sampling.method, ssp.relogit uses poisson default sampling method. poisson stands drawing subsamples one one comparing subsampling probability realization uniform random variable U(0,1)U(0,1). actual size drawn subsample random expected size n.sspn.ssp.","code":"ssp.relogit(   formula,   data,   subset = NULL,   n.plt,   n.ssp,   criterion = \"optL\",   likelihood = \"logOddsCorrection\",   control = list(...),   contrasts = NULL,   ... )"},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-relogit.html","id":"criterion","dir":"Articles","previous_headings":"Key Arguments","what":"criterion","title":"`ssp.relogit`: Subsampling for Logistic Regression Model with Rare Events","text":"choices criterion include optA, optL(default), LCC uniform. optimal subsampling criterion optA optL derived minimizing asymptotic covariance subsample estimator, proposed Wang, Zhu, Ma (2018). LCC uniform baseline methods. Note rare observations Y=1Y=1 full data, sampling probabilities 11. non-rare observations, sampling probabilities depend choice criterion.","code":""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-relogit.html","id":"likelihood","dir":"Articles","previous_headings":"Key Arguments","what":"likelihood","title":"`ssp.relogit`: Subsampling for Logistic Regression Model with Rare Events","text":"available choices likelihood include weighted logOddsCorrection(default). likelihood functions can derive unbiased estimator. Theoretical results indicate logOddsCorrection efficient weighted context rare events logistic regression. See @Wang, Zhang, Wang (2021).","code":""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-relogit.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"`ssp.relogit`: Subsampling for Logistic Regression Model with Rare Events","text":"drawing subsample, ssp.relogit utilizes survey::svyglm fit model subsample, eventually uses glm. Arguments accepted svyglm can passed ... ssp.glm. example demonstrating use ssp.relogit.","code":"n.plt <- 200 n.ssp <- 600 ssp.results <- ssp.relogit(formula = formula,                            data = data,                            n.plt = n.plt,                            n.ssp = n.ssp,                            criterion = 'optA',                            likelihood = 'logOddsCorrection'                            )"},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-relogit.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"`ssp.relogit`: Subsampling for Logistic Regression Model with Rare Events","text":"returned object contains estimation results indices drawn subsample full dataset. key returned variables: index.plt index row indices drawn pilot subsamples optimal subsamples full data. coef.ssp subsample estimator β\\beta coef linear combination coef.plt (pilot estimator) coef.ssp. cov.ssp cov estimated covariance matrices coef.ssp coef. printed results, Expected Subsample Size sum rare event counts (N1N_{1}) expected size negative subsample drawn N0N_{0} non-rare observations. Actual Subsample Size sum N1N_{1} actual size negative subsample N0N_{0} non-rare observations. coefficients standard errors printed summary() coef square root diag(cov).","code":"names(ssp.results) #>  [1] \"model.call\"            \"coef.plt\"              \"coef.ssp\"              #>  [4] \"coef\"                  \"cov.ssp\"               \"cov\"                   #>  [7] \"index.plt\"             \"index\"                 \"N\"                     #> [10] \"subsample.size.expect\" \"terms\" summary(ssp.results) #> Model Summary #>  #>  #> Call: #>  #> ssp.relogit(formula = formula, data = data, n.plt = n.plt, n.ssp = n.ssp,  #>     criterion = \"optA\", likelihood = \"logOddsCorrection\") #>  #> Subsample Size: #>                                 #> 1       Total Sample Size 20000 #> 2 Expected Subsample Size   866 #> 3   Actual Subsample Size   886 #> 4   Unique Subsample Size   886 #> 5  Expected Subample Rate 4.33% #> 6    Actual Subample Rate 4.43% #> 7    Unique Subample Rate 4.43% #>  #> Coefficients: #>  #>           Estimate Std. Error  z value Pr(>|z|) #> Intercept  -5.7329     0.1410 -40.6603  <0.0001 #> V1         -0.4249     0.0895  -4.7460  <0.0001 #> V2         -0.5991     0.1014  -5.9098  <0.0001 #> V3         -0.3641     0.1030  -3.5336   0.0004 #> V4         -0.5157     0.0972  -5.3076  <0.0001 #> V5         -0.4974     0.1032  -4.8182  <0.0001 #> V6         -0.5034     0.0848  -5.9376  <0.0001"},{"path":[]},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-softmax.html","id":"terminology","dir":"Articles","previous_headings":"","what":"Terminology","title":"`ssp.softmax`: Subsampling for Softmax (Multinomial) Regression Model","text":"Full dataset: whole dataset used input. Full data estimator: estimator obtained fitting model full dataset. Subsample: subset observations drawn full dataset. Subsample estimator: estimator obtained fitting model subsample. Subsampling probability (π\\pi): probability assigned observation inclusion subsample.","code":""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-softmax.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"`ssp.softmax`: Subsampling for Softmax (Multinomial) Regression Model","text":"introduce usage ssp.softmax simulated data. XX contains d=3d=3 covariates drawn multinormal distribution YY multicategory response variable K+1=3K+1=3 categories. full data size N=1×104N = 1 \\times 10^4.","code":"library(subsampling) set.seed(1) d <- 3 K <- 2 G <- rbind(rep(-1/(K+1), K), diag(K) - 1/(K+1)) %x% diag(d) N <- 1e4 beta.true.baseline <- cbind(rep(0, d), matrix(-1.5, d, K)) beta.true.summation <- cbind(rep(1, d), 0.5 * matrix(-1, d, K)) mu <- rep(0, d) sigma <- matrix(0.5, nrow = d, ncol = d) diag(sigma) <- rep(1, d) X <- MASS::mvrnorm(N, mu, sigma) prob <- exp(X %*% beta.true.summation) prob <- prob / rowSums(prob) Y <- apply(prob, 1, function(row) sample(0:K, size = 1, prob = row)) data <- as.data.frame(cbind(Y, X)) colnames(data) <- c(\"Y\", paste(\"V\", 1:ncol(X), sep=\"\")) head(data) #>   Y         V1          V2         V3 #> 1 2 -0.3756189 -0.17727086 -0.9816025 #> 2 2  0.2912939  0.60753208 -0.4489936 #> 3 2 -1.0530547  0.02079337 -1.0146024 #> 4 0  0.1854791  2.45385260  1.2682922 #> 5 0  0.8687332  0.21941612 -0.2810234 #> 6 1 -0.8336174 -0.32556141 -0.8505501"},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-softmax.html","id":"key-arguments","dir":"Articles","previous_headings":"","what":"Key Arguments","title":"`ssp.softmax`: Subsampling for Softmax (Multinomial) Regression Model","text":"function usage core functionality ssp.softmax revolves around three key questions: subsampling probabilities computed? (Controlled criterion argument) subsample drawn? (Controlled sampling.method argument) likelihood adjusted correct bias? (Controlled likelihood argument)","code":"ssp.softmax(   formula,   data,   subset,   n.plt,   n.ssp,   criterion = \"MSPE\",   sampling.method = \"poisson\",   likelihood = \"MSCLE\",   constraint = \"summation\",   control = list(...),   contrasts = NULL,   ... )"},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-softmax.html","id":"criterion","dir":"Articles","previous_headings":"Key Arguments","what":"criterion","title":"`ssp.softmax`: Subsampling for Softmax (Multinomial) Regression Model","text":"choices criterion include optA, optL, ,MSPE(default), LUC uniform. default criterion MSPE minimizes mean squared prediction error subsample estimator full data estimator. Criterion optA optL derived minimizing asymptotic covariance subsample estimator. LUC uniform baseline methods. See Yao, Zou, Wang (2023) Wang Kim (2022) details.","code":""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-softmax.html","id":"sampling-method","dir":"Articles","previous_headings":"Key Arguments","what":"sampling.method","title":"`ssp.softmax`: Subsampling for Softmax (Multinomial) Regression Model","text":"options sampling.method include withReplacement poisson (default). withReplacement. stands drawing n.sspn.ssp subsamples full dataset replacement, using specified subsampling probability. poisson stands drawing subsamples one one comparing subsampling probability realization uniform random variable U(0,1)U(0,1). expected number drawed samples n.sspn.ssp.","code":""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-softmax.html","id":"likelihood","dir":"Articles","previous_headings":"Key Arguments","what":"likelihood","title":"`ssp.softmax`: Subsampling for Softmax (Multinomial) Regression Model","text":"available choices likelihood include weighted MSCLE(default). MSCLE stands maximum sampled conditional likelihood. likelihood functions can derive unbiased optimal subsample estimator. See Wang Kim (2022) details MSCLE.","code":""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-softmax.html","id":"constraint","dir":"Articles","previous_headings":"Key Arguments","what":"constraint","title":"`ssp.softmax`: Subsampling for Softmax (Multinomial) Regression Model","text":"Softmax model needs constraint unknown coefficients identifiability. options constraint include summation baseline (default). baseline constraint assumes coefficient baseline category 00. Without loss generality, ssp.softmax sets category Y=0Y=0 baseline category 𝛃0=0\\boldsymbol{\\beta}_0=0. summation constraint ∑k=0K𝛃k\\sum_{k=0}^{K} \\boldsymbol{\\beta}_k can also used subsampling method purpose calculating optimal subsampling probability. two constraints lead different interpretation coefficients equal computing P(yi,k=1∣𝐱i)P(y_{,k} = 1 \\mid \\mathbf{x}_i). estimation coefficients returned ssp.softmax() baseline constraint.","code":""},{"path":"https://dqksnow.github.io/subsampling/articles/ssp-softmax.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"`ssp.softmax`: Subsampling for Softmax (Multinomial) Regression Model","text":"drawing subsample, ssp.softmax utilizes nnet::multinom fit model subsample. Arguments accepted nnet::multinom can passed ... ssp.softmax. two examples demonstrating use ssp.softmax different configurations. summary(ssp.results1) shows draws 600 observations 10000, number unique indices less 600 since use sampling.method = 'withReplacement'. fitting softmax model subsample using choosen weighted likelihood function, get coefficients estimation standard errors . returned object contains estimation results index drawn subsamples full dataset. key returned variables: index.plt index row indices drawn pilot subsamples optimal subsamples full data. coef.ssp subsample estimator β\\beta coef linear combination coef.plt (pilot estimator) coef.ssp. cov.ssp cov estimated covariance matrices coef.ssp coef.","code":"n.plt <- 200 n.ssp <- 600 formula <- Y ~ . -1 ssp.results1 <- ssp.softmax(formula = formula,                             data = data,                             n.plt = n.plt,                             n.ssp = n.ssp,                             criterion = 'MSPE',                             sampling.method = 'withReplacement',                             likelihood = 'weighted',                             constraint = 'baseline'                             ) #> [1] \"Message from nnet::multinom: \" #> # weights:  12 (6 variable) #> initial  value 219.722458  #> iter  10 value 143.304799 #> final  value 143.304778  #> converged #> [1] \"Message from nnet::multinom: \" #> # weights:  12 (6 variable) #> initial  value 5789394.068697  #> iter  10 value 4219770.981211 #> final  value 4219003.340996  #> converged summary(ssp.results1) #> Model Summary #>  #>  #> Call: #>  #> ssp.softmax(formula = formula, data = data, n.plt = n.plt, n.ssp = n.ssp,  #>     criterion = \"MSPE\", sampling.method = \"withReplacement\",  #>     likelihood = \"weighted\", constraint = \"baseline\") #>  #> Subsample Size: #>                                 #> 1       Total Sample Size 10000 #> 2 Expected Subsample Size   600 #> 3   Actual Subsample Size   600 #> 4   Unique Subsample Size   563 #> 5  Expected Subample Rate    6% #> 6    Actual Subample Rate    6% #> 7    Unique Subample Rate 5.63% #>  #> Coefficients: #>  #>         [,1]      [,2] #> V1 -1.175907 -1.281935 #> V2 -1.619482 -1.502412 #> V3 -1.231662 -1.414723 #>  #> Std. Errors: #>  #>         [,1]      [,2] #> V1 0.1457377 0.1459830 #> V2 0.1442445 0.1461619 #> V3 0.1498036 0.1492071 ssp.results2 <- ssp.softmax(formula = formula,                             data = data,                             n.plt = n.plt,                             n.ssp = n.ssp,                             criterion = 'MSPE',                             sampling.method = 'poisson',                             likelihood = 'MSCLE',                             constraint = 'baseline'                             ) #> [1] \"Message from nnet::multinom: \" #> # weights:  12 (6 variable) #> initial  value 219.722458  #> iter  10 value 126.651711 #> final  value 126.637171  #> converged #> [1] \"Message from nnet::multinom: \" #> # weights:  21 (6 variable) #> initial  value 908.207717  #> iter  10 value 651.150361 #> final  value 650.943777  #> converged summary(ssp.results2) #> Model Summary #>  #>  #> Call: #>  #> ssp.softmax(formula = formula, data = data, n.plt = n.plt, n.ssp = n.ssp,  #>     criterion = \"MSPE\", sampling.method = \"poisson\", likelihood = \"MSCLE\",  #>     constraint = \"baseline\") #>  #> Subsample Size: #>                                 #> 1       Total Sample Size 10000 #> 2 Expected Subsample Size   600 #> 3   Actual Subsample Size   702 #> 4   Unique Subsample Size   702 #> 5  Expected Subample Rate    6% #> 6    Actual Subample Rate 7.02% #> 7    Unique Subample Rate 7.02% #>  #> Coefficients: #>  #>         [,1]      [,2] #> V1 -1.450790 -1.434135 #> V2 -1.764387 -1.726621 #> V3 -1.448671 -1.607003 #>  #> Std. Errors: #>  #>         [,1]      [,2] #> V1 0.1314360 0.1353568 #> V2 0.1441155 0.1413029 #> V3 0.1389344 0.1411973 names(ssp.results1) #>  [1] \"model.call\"            \"coef.plt\"              \"coef.ssp\"              #>  [4] \"coef\"                  \"coef.plt.sum\"          \"coef.ssp.sum\"          #>  [7] \"coef.sum\"              \"cov.plt\"               \"cov.ssp\"               #> [10] \"cov\"                   \"cov.plt.sum\"           \"cov.sum\"               #> [13] \"cov.ssp.sum\"           \"index.plt\"             \"index.ssp\"             #> [16] \"N\"                     \"subsample.size.expect\" \"terms\""},{"path":[]},{"path":"https://dqksnow.github.io/subsampling/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Qingkai Dong. Author, maintainer, copyright holder. Yaqiong Yao. Author. Haiying Wang. Author. Qiang Zhang. Contributor. Jun Yan. Contributor.","code":""},{"path":"https://dqksnow.github.io/subsampling/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dong Q, Yao Y, Wang H (2025). subsampling: Optimal Subsampling Methods Statistical Models. R package version 0.1.1, https://dqksnow.github.io/subsampling, https://github.com/dqksnow/subsampling.","code":"@Manual{,   title = {subsampling: Optimal Subsampling Methods for Statistical Models},   author = {Qingkai Dong and Yaqiong Yao and Haiying Wang},   year = {2025},   note = {R package version 0.1.1, https://dqksnow.github.io/subsampling},   url = {https://github.com/dqksnow/subsampling}, }"},{"path":"https://dqksnow.github.io/subsampling/index.html","id":"subsampling","dir":"","previous_headings":"","what":"Optimal Subsampling Methods for Statistical Models","title":"Optimal Subsampling Methods for Statistical Models","text":"major challenge big data statistical analysis demand computing resources. example, fitting logistic regression model binary response variable N×dN \\times d dimensional covariates, computational complexity estimating coefficients using IRLS algorithm O(ζNd2)O(\\zeta N d^2), ζ\\zeta number iteriation. NN large, cost can prohibitive, especially high performance computing resources unavailable. Subsampling become widely used technique balance trade-computational efficiency statistical efficiency. R package subsampling provides optimal subsampling methods various statistical models generalized linear models (GLM), softmax (multinomial) regression, rare event logistic regression quantile regression model. Specialized subsampling techniques provided address specific challenges across different models datasets. specified model assumptions subsampling techniques, draws subsample full data, fits model subsample perform statistical inferences.","code":""},{"path":"https://dqksnow.github.io/subsampling/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Optimal Subsampling Methods for Statistical Models","text":"can install package ","code":"# Install from CRAN install.packages(\"subsampling\")  # Or install the development version from GitHub # install.packages(\"devtools\") devtools::install_github(\"dqksnow/subsampling\")"},{"path":"https://dqksnow.github.io/subsampling/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Optimal Subsampling Methods for Statistical Models","text":"Online document provides guidance quick start. Generalized linear model. Rare event logistic regression. Softmax (multinomial) regression. Quantile regression.","code":""},{"path":"https://dqksnow.github.io/subsampling/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Optimal Subsampling Methods for Statistical Models","text":"example subsampling method logistic regression:","code":"library(subsampling) set.seed(1) N <- 1e4 beta0 <- rep(-0.5, 7) d <- length(beta0) - 1 corr <- 0.5 sigmax  <- matrix(corr, d, d) + diag(1-corr, d) X <- MASS::mvrnorm(N, rep(0, d), sigmax) colnames(X) <- paste(\"V\", 1:ncol(X), sep = \"\") P <- 1 - 1 / (1 + exp(beta0[1] + X %*% beta0[-1])) Y <- rbinom(N, 1, P) data <- as.data.frame(cbind(Y, X)) formula <- Y ~ . n.plt <- 200 n.ssp <- 600 ssp.results <- ssp.glm(formula = formula,                        data = data,                        n.plt = n.plt,                        n.ssp = n.ssp,                        family = \"quasibinomial\",                        criterion = \"optL\",                        sampling.method = \"poisson\",                        likelihood = \"weighted\"                        ) summary(ssp.results) #> Model Summary #>  #> Call: #>  #> ssp.glm(formula = formula, data = data, n.plt = n.plt, n.ssp = n.ssp,  #>     family = \"quasibinomial\", criterion = \"optL\", sampling.method = \"poisson\",  #>     likelihood = \"weighted\") #>  #> Subsample Size: #>                                 #> 1       Total Sample Size 10000 #> 2 Expected Subsample Size   600 #> 3   Actual Subsample Size   635 #> 4   Unique Subsample Size   635 #> 5  Expected Subample Rate    6% #> 6    Actual Subample Rate 6.35% #> 7    Unique Subample Rate 6.35% #>  #> Coefficients: #>  #>           Estimate Std. Error z value Pr(>|z|) #> Intercept  -0.4149     0.0803 -5.1694  <0.0001 #> V1         -0.5874     0.0958 -6.1286  <0.0001 #> V2         -0.4723     0.1086 -4.3499  <0.0001 #> V3         -0.5492     0.1014 -5.4164  <0.0001 #> V4         -0.4044     0.1012 -3.9950  <0.0001 #> V5         -0.3725     0.1045 -3.5649   0.0004 #> V6         -0.6703     0.0973 -6.8859  <0.0001"},{"path":"https://dqksnow.github.io/subsampling/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Optimal Subsampling Methods for Statistical Models","text":"development package supported National Eye Institute National Institutes Health Award Number R21EY035710.","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.glm.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimal Subsampling Methods for Generalized Linear Models — ssp.glm","title":"Optimal Subsampling Methods for Generalized Linear Models — ssp.glm","text":"Draw subsample full dataset fit generalized linear model (GLM) subsample. quick start, refer vignette.","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.glm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimal Subsampling Methods for Generalized Linear Models — ssp.glm","text":"","code":"ssp.glm(   formula,   data,   subset = NULL,   n.plt,   n.ssp,   family = \"binomial\",   criterion = \"optL\",   sampling.method = \"poisson\",   likelihood = \"weighted\",   control = list(...),   contrasts = NULL,   ... )"},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.glm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimal Subsampling Methods for Generalized Linear Models — ssp.glm","text":"formula model formula object class \"formula\" describes model fitted. data data frame containing variables model. Denote \\(N\\) number observations data. subset optional vector specifying subset observations data use analysis. subset viewed full data. n.plt pilot subsample size (first-step subsample size). subsample used compute pilot estimator estimate optimal subsampling probabilities. n.ssp expected size optimal subsample (second-step subsample). sampling.method = 'withReplacement', exact subsample size n.ssp. sampling.method = 'poisson', n.ssp expected subsample size. family family can character string naming family function, family function result call family function. criterion choices include optA, optL(default), LCC uniform. optA Minimizes trace asymptotic covariance matrix subsample estimator. optL Minimizes trace transformation asymptotic covariance matrix. computational complexity optA \\(O(N d^2)\\) optL \\(O(N d)\\). LCC Local Case-Control sampling probability, used baseline subsampling strategy. uniform Assigns equal subsampling probability \\(\\frac{1}{N}\\) observation, serving baseline subsampling strategy. sampling.method sampling method use. Options include withReplacement poisson (default). withReplacement draws exactly n.ssp subsamples size \\(N\\) full dataset replacement, using specified subsampling probabilities. poisson draws observations independently comparing subsampling probability realization uniform random variable  \\(U(0,1)\\). Differences methods: Sample size: withReplacement draws exactly  n.ssp subsamples poisson draws subsamples expected size n.ssp, meaning actual size may vary. Memory usage: withReplacement requires entire dataset loaded , poisson allows processing observations sequentially (implemented future version). Estimator performance: Theoretical results show poisson tends get subsample estimator lower asymptotic variance compared withReplacement likelihood likelihood function use. Options include weighted (default) logOddsCorrection. bias-correction likelihood function required subsample since unequal subsampling probabilities introduce bias. weighted Applies weighted likelihood function observation weighted inverse subsampling probability. logOddsCorrection lieklihood available logistic regression model (.e., family binomial quasibinomial). uses conditional likelihood, element likelihood represents probability \\(Y=1\\), given subsample drawn. control argument control contains two tuning parameters alpha b. alpha \\(\\[0,1]\\) mixture weight user-assigned subsampling probability uniform subsampling probability. actual subsample probability \\(\\pi = (1-\\alpha)\\pi^{opt} + \\alpha \\pi^{uni}\\). protects estimator extreme small subsampling probability. default value 0. b positive number used constaint poisson subsampling probability. b close 0 results subsampling probabilities closer uniform probability \\(\\frac{1}{N}\\). b=2 default value. See relevant references details. contrasts optional list. specifies categorical variables represented design matrix. example, contrasts = list(v1 = 'contr.treatment', v2 = 'contr.sum'). ... list parameters passed svyglm().","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.glm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimal Subsampling Methods for Generalized Linear Models — ssp.glm","text":"ssp.glm returns object class \"ssp.glm\" containing following components (optional): model.call original function call. coef.plt pilot estimator. See Details information. coef.ssp estimator obtained optimal subsample. coef weighted linear combination coef.plt coef.ssp. combination weights depend relative size n.plt n.ssp estimated covariance matrices coef.plt coef.ssp. blend pilot subsample information optimal subsample estimator since pilot subsample already drawn. coefficients standard errors reported summary coef square root diag(cov). cov.ssp covariance matrix coef.ssp. cov covariance matrix coef. index.plt Row indices pilot subsample full dataset. index.ssp Row indices optimal subsample full dataset. N number observations full dataset. subsample.size.expect expected subsample size, equals n.ssp ssp.glm. Note functions, ssp.relogit, value may differ. terms terms object fitted model.","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.glm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimal Subsampling Methods for Generalized Linear Models — ssp.glm","text":"pilot estimator unknown parameter  \\(\\beta\\) required optA optL subsampling probabilities depend \\(\\beta\\). \"free lunch\" determining optimal subsampling probabilities. Fortunately pilot estimator needs satisfy mild conditions. logistic regression, achieved drawing size n.plt subsample replacement full dataset. case-control subsample probability applied, , \\(\\pi_i =   \\frac{1}{2N_1}\\)  \\(Y_i=1\\)  \\(\\pi_i = \\frac{1}{2N_0}\\)  \\(Y_i=0\\), \\(=1,...,N\\), \\(N_0\\) \\(N_1\\) counts observations \\(Y = 0\\) \\(Y = 1\\), respectively. families, uniform subsampling probabilities applied. Typically, n.plt relatively small compared n.ssp. criterion = 'uniform', need compute pilot estimator. case, size n.plt + n.ssp subsample drawn uniform sampling probability coef corresponding  estimator. suggested survey::svyglm(), binomial poisson families, use family=quasibinomial() family=quasipoisson() avoid warning \"eval(family$initialize) : non-integer #successes binomial glm!\". quasi versions family objects give point estimates suppress warning. Since subsampling methods rely point estimates svyglm() computation, using quasi families introduce issues. Gamma family, ssp.glm returns estimation coefficients, dispersion parameter estimated.","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.glm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimal Subsampling Methods for Generalized Linear Models — ssp.glm","text":"Wang, H. (2019). efficient estimation logistic regression optimal subsamples. Journal machine learning research, 20(132), 1-59. Ai, M., Yu, J., Zhang, H., & Wang, H. (2021). Optimal subsampling algorithms big data regressions. Statistica Sinica, 31(2), 749-772. Wang, H., & Kim, J. K. (2022). Maximum sampled conditional likelihood informative subsampling. Journal machine learning research, 23(332), 1-50.","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.glm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimal Subsampling Methods for Generalized Linear Models — ssp.glm","text":"","code":"# logistic regression set.seed(2) N <- 1e4 beta0 <- rep(-0.5, 7) d <- length(beta0) - 1 corr <- 0.5 sigmax  <- matrix(corr, d, d) + diag(1-corr, d) X <- MASS::mvrnorm(N, rep(0, d), sigmax) Y <- rbinom(N, 1, 1 - 1 / (1 + exp(beta0[1] + X %*% beta0[-1]))) data <- as.data.frame(cbind(Y, X)) formula <- Y ~ . n.plt <- 500 n.ssp <- 1000 subsampling.results <- ssp.glm(formula = formula,  data = data,  n.plt = n.plt, n.ssp = n.ssp, family = 'quasibinomial', criterion = \"optL\", sampling.method = 'poisson', likelihood = \"logOddsCorrection\") summary(subsampling.results) #> Model Summary #>  #> Call: #>  #> ssp.glm(formula = formula, data = data, n.plt = n.plt, n.ssp = n.ssp,  #>     family = \"quasibinomial\", criterion = \"optL\", sampling.method = \"poisson\",  #>     likelihood = \"logOddsCorrection\") #>  #> Subsample Size: #>                                  #> 1       Total Sample Size  10000 #> 2 Expected Subsample Size   1000 #> 3   Actual Subsample Size   1034 #> 4   Unique Subsample Size   1034 #> 5  Expected Subample Rate    10% #> 6    Actual Subample Rate 10.34% #> 7    Unique Subample Rate 10.34% #>  #> Coefficients: #>  #>           Estimate Std. Error z value Pr(>|z|) #> Intercept  -0.5430     0.0603 -9.0098  <0.0001 #> V2         -0.5562     0.0743 -7.4864  <0.0001 #> V3         -0.4597     0.0726 -6.3341  <0.0001 #> V4         -0.4561     0.0761 -5.9945  <0.0001 #> V5         -0.5714     0.0755 -7.5644  <0.0001 #> V6         -0.4958     0.0721 -6.8725  <0.0001 #> V7         -0.4962     0.0736 -6.7385  <0.0001 subsampling.results <- ssp.glm(formula = formula,  data = data,  n.plt = n.plt, n.ssp = n.ssp, family = 'quasibinomial',  criterion = \"optL\", sampling.method = 'withReplacement',  likelihood = \"weighted\") summary(subsampling.results) #> Model Summary #>  #> Call: #>  #> ssp.glm(formula = formula, data = data, n.plt = n.plt, n.ssp = n.ssp,  #>     family = \"quasibinomial\", criterion = \"optL\", sampling.method = \"withReplacement\",  #>     likelihood = \"weighted\") #>  #> Subsample Size: #>                                 #> 1       Total Sample Size 10000 #> 2 Expected Subsample Size  1000 #> 3   Actual Subsample Size  1000 #> 4   Unique Subsample Size   901 #> 5  Expected Subample Rate   10% #> 6    Actual Subample Rate   10% #> 7    Unique Subample Rate 9.01% #>  #> Coefficients: #>  #>           Estimate Std. Error z value Pr(>|z|) #> Intercept  -0.5201     0.0649 -8.0143  <0.0001 #> V2         -0.6526     0.0853 -7.6500  <0.0001 #> V3         -0.4247     0.0864 -4.9176  <0.0001 #> V4         -0.2804     0.0841 -3.3329   0.0009 #> V5         -0.5186     0.0792 -6.5508  <0.0001 #> V6         -0.6281     0.0837 -7.5026  <0.0001 #> V7         -0.5878     0.0836 -7.0348  <0.0001 Uni.subsampling.results <- ssp.glm(formula = formula,  data = data,  n.plt = n.plt, n.ssp = n.ssp, family = 'quasibinomial',  criterion = 'uniform') summary(Uni.subsampling.results) #> Model Summary #>  #> Call: #>  #> ssp.glm(formula = formula, data = data, n.plt = n.plt, n.ssp = n.ssp,  #>     family = \"quasibinomial\", criterion = \"uniform\") #>  #> Subsample Size: #>                                  #> 1       Total Sample Size  10000 #> 2 Expected Subsample Size   1500 #> 3   Actual Subsample Size   1462 #> 4   Unique Subsample Size   1462 #> 5  Expected Subample Rate    15% #> 6    Actual Subample Rate 14.62% #> 7    Unique Subample Rate 14.62% #>  #> Coefficients: #>  #>           Estimate Std. Error z value Pr(>|z|) #> Intercept  -0.5165     0.0720 -7.1700  <0.0001 #> V2         -0.7625     0.1000 -7.6253  <0.0001 #> V3         -0.3873     0.0919 -4.2152  <0.0001 #> V4         -0.3826     0.0976 -3.9188  <0.0001 #> V5         -0.5533     0.0914 -6.0567  <0.0001 #> V6         -0.3779     0.0991 -3.8143   0.0001 #> V7         -0.5427     0.0923 -5.8806  <0.0001 #################### # poisson regression set.seed(1) N <-  1e4 beta0 <- rep(0.5, 7) d <- length(beta0) - 1 X <- matrix(runif(N * d), N, d) epsilon <- runif(N) lambda <- exp(beta0[1] + X %*% beta0[-1]) Y <- rpois(N, lambda) data <- as.data.frame(cbind(Y, X)) formula <- Y ~ . n.plt <- 200 n.ssp <- 600 subsampling.results <- ssp.glm(formula = formula,  data = data,  n.plt = n.plt, n.ssp = n.ssp, family = 'poisson', criterion = \"optL\",  sampling.method = 'poisson', likelihood = \"weighted\") summary(subsampling.results) #> Model Summary #>  #> Call: #>  #> ssp.glm(formula = formula, data = data, n.plt = n.plt, n.ssp = n.ssp,  #>     family = \"poisson\", criterion = \"optL\", sampling.method = \"poisson\",  #>     likelihood = \"weighted\") #>  #> Subsample Size: #>                                 #> 1       Total Sample Size 10000 #> 2 Expected Subsample Size   600 #> 3   Actual Subsample Size   681 #> 4   Unique Subsample Size   681 #> 5  Expected Subample Rate    6% #> 6    Actual Subample Rate 6.81% #> 7    Unique Subample Rate 6.81% #>  #> Coefficients: #>  #>           Estimate Std. Error z value Pr(>|z|) #> Intercept   0.5662     0.0568  9.9711  <0.0001 #> V2          0.4893     0.0357 13.7219  <0.0001 #> V3          0.5126     0.0370 13.8583  <0.0001 #> V4          0.4253     0.0351 12.1181  <0.0001 #> V5          0.4972     0.0397 12.5128  <0.0001 #> V6          0.4930     0.0383 12.8792  <0.0001 #> V7          0.4871     0.0377 12.9209  <0.0001 subsampling.results <- ssp.glm(formula = formula,  data = data,  n.plt = n.plt, n.ssp = n.ssp, family = 'poisson',  criterion = \"optL\",  sampling.method = 'withReplacement', likelihood = \"weighted\") summary(subsampling.results) #> Model Summary #>  #> Call: #>  #> ssp.glm(formula = formula, data = data, n.plt = n.plt, n.ssp = n.ssp,  #>     family = \"poisson\", criterion = \"optL\", sampling.method = \"withReplacement\",  #>     likelihood = \"weighted\") #>  #> Subsample Size: #>                                 #> 1       Total Sample Size 10000 #> 2 Expected Subsample Size   600 #> 3   Actual Subsample Size   600 #> 4   Unique Subsample Size   568 #> 5  Expected Subample Rate    6% #> 6    Actual Subample Rate    6% #> 7    Unique Subample Rate 5.68% #>  #> Coefficients: #>  #>           Estimate Std. Error z value Pr(>|z|) #> Intercept   0.5543     0.0590  9.3997  <0.0001 #> V2          0.4505     0.0402 11.2074  <0.0001 #> V3          0.4643     0.0423 10.9781  <0.0001 #> V4          0.5392     0.0420 12.8471  <0.0001 #> V5          0.4497     0.0425 10.5933  <0.0001 #> V6          0.4529     0.0415 10.9180  <0.0001 #> V7          0.5495     0.0395 13.9048  <0.0001 Uni.subsampling.results <- ssp.glm(formula = formula,  data = data,  n.plt = n.plt, n.ssp = n.ssp, family = 'poisson',  criterion = 'uniform') summary(Uni.subsampling.results) #> Model Summary #>  #> Call: #>  #> ssp.glm(formula = formula, data = data, n.plt = n.plt, n.ssp = n.ssp,  #>     family = \"poisson\", criterion = \"uniform\") #>  #> Subsample Size: #>                                 #> 1       Total Sample Size 10000 #> 2 Expected Subsample Size   800 #> 3   Actual Subsample Size   820 #> 4   Unique Subsample Size   820 #> 5  Expected Subample Rate    8% #> 6    Actual Subample Rate  8.2% #> 7    Unique Subample Rate  8.2% #>  #> Coefficients: #>  #>           Estimate Std. Error z value Pr(>|z|) #> Intercept   0.4226     0.0591  7.1479  <0.0001 #> V2          0.5789     0.0431 13.4381  <0.0001 #> V3          0.4852     0.0425 11.4087  <0.0001 #> V4          0.5401     0.0427 12.6439  <0.0001 #> V5          0.4419     0.0432 10.2351  <0.0001 #> V6          0.5156     0.0436 11.8327  <0.0001 #> V7          0.5311     0.0418 12.6998  <0.0001 ################## # gamma regression set.seed(1) N <- 1e4 p <- 3 beta0 <- rep(0.5, p + 1) d <- length(beta0) - 1 shape <- 2 X <- matrix(runif(N * d), N, d) link_function <- function(X, beta0) 1 / (beta0[1] + X %*% beta0[-1]) scale <- link_function(X, beta0) / shape Y <- rgamma(N, shape = shape, scale = scale) data <- as.data.frame(cbind(Y, X)) formula <- Y ~ . n.plt <- 200 n.ssp <- 1000 subsampling.results <- ssp.glm(formula = formula,  data = data,  n.plt = n.plt, n.ssp = n.ssp, family = 'Gamma', criterion = \"optL\",  sampling.method = 'poisson', likelihood = \"weighted\") summary(subsampling.results) #> Model Summary #>  #> Call: #>  #> ssp.glm(formula = formula, data = data, n.plt = n.plt, n.ssp = n.ssp,  #>     family = \"Gamma\", criterion = \"optL\", sampling.method = \"poisson\",  #>     likelihood = \"weighted\") #>  #> Subsample Size: #>                                 #> 1       Total Sample Size 10000 #> 2 Expected Subsample Size  1000 #> 3   Actual Subsample Size   989 #> 4   Unique Subsample Size   989 #> 5  Expected Subample Rate   10% #> 6    Actual Subample Rate 9.89% #> 7    Unique Subample Rate 9.89% #>  #> Coefficients: #>  #>           Estimate Std. Error z value Pr(>|z|) #> Intercept   0.5099     0.0510  9.9893  <0.0001 #> V2          0.4732     0.0603  7.8469  <0.0001 #> V3          0.4040     0.0621  6.5035  <0.0001 #> V4          0.4945     0.0681  7.2599  <0.0001"},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.quantreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimal Subsampling Methods for Quantile Regression Model — ssp.quantreg","title":"Optimal Subsampling Methods for Quantile Regression Model — ssp.quantreg","text":"Draw subsample full dataset fit quantile regression model. quick start, refer vignette.","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.quantreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimal Subsampling Methods for Quantile Regression Model — ssp.quantreg","text":"","code":"ssp.quantreg(   formula,   data,   subset = NULL,   tau = 0.5,   n.plt,   n.ssp,   B = 5,   boot = TRUE,   criterion = \"optL\",   sampling.method = \"withReplacement\",   likelihood = c(\"weighted\"),   control = list(...),   contrasts = NULL,   ... )"},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.quantreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimal Subsampling Methods for Quantile Regression Model — ssp.quantreg","text":"formula model formula object class \"formula\" describes model fitted. data data frame containing variables model. Denote \\(N\\) number observations data. subset optional vector specifying subset observations data use analysis. subset viewed full data. tau interested quantile. n.plt pilot subsample size (first-step subsample size). subsample used compute pilot estimator estimate optimal subsampling probabilities. n.ssp expected size optimal subsample (second-step subsample). sampling.method = 'withReplacement', exact subsample size n.ssp. sampling.method = 'poisson', n.ssp expected subsample size. B number subsamples iterative sampling algorithm. subsample contains n.ssp observations. allows us estimate covariance matrix. boot TRUE perform iterative sampling algorithm estimate covariance matrix. FALSE one subsample size B*n.ssp returned. criterion determines subsampling probabilities computed. Choices include optL(default) uniform. optL Minimizes trace transformation asymptotic covariance matrix subsample estimator. uniform Assigns equal subsampling probability \\(\\frac{1}{N}\\) observation, serving baseline subsampling strategy. sampling.method sampling method drawing optimal subsample. Choices include withReplacement poisson(default). withReplacement draws exactly n.ssp subsamples size \\(N\\) full dataset replacement, using specified subsampling probabilities. poisson draws observations independently comparing subsampling probability realization uniform random variable  \\(U(0,1)\\). likelihood type maximum likelihood function used calculate optimal subsampling estimator. Currently weighted implemented applies weighted likelihood function observation weighted inverse subsampling probability. control argument control contains two tuning parameters alpha b. alpha \\(\\[0,1]\\) mixture weight user-assigned subsampling probability uniform subsampling probability. actual subsample probability \\(\\pi = (1-\\alpha)\\pi^{opt} + \\alpha \\pi^{uni}\\). protects estimator extreme small subsampling probability. default value 0. b positive number used constaint poisson subsampling probability. b close 0 results subsampling probabilities closer uniform probability \\(\\frac{1}{N}\\). b=2 default value. See relevant references details. contrasts optional list. specifies categorical variables represented design matrix. example, contrasts = list(v1 = 'contr.treatment', v2 = 'contr.sum'). ... list parameters passed quantreg::rq().","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.quantreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimal Subsampling Methods for Quantile Regression Model — ssp.quantreg","text":"ssp.quantreg returns object class \"ssp.quantreg\" containing following components (optional): model.call original function call. coef.plt pilot estimator. See Details information. coef estimator obtained optimal subsample. cov covariance matrix coef index.plt Row indices pilot subsample full dataset. index.ssp Row indices optimal subsample full dataset. N number observations full dataset. subsample.size.expect expected subsample size terms terms object fitted model.","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.quantreg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimal Subsampling Methods for Quantile Regression Model — ssp.quantreg","text":"arguments returned variables meaning ssp.glm. Refer vignette pilot estimator unknown parameter \\(\\beta\\) required optL subsampling probabilities depend \\(\\beta\\). \"free lunch\" determining optimal subsampling probabilities. quantile regression, achieved drawing size n.plt subsample replacement full dataset, using uniform sampling probability. boot=TRUE, returned value subsample.size.expect equals B*n.ssp, covariance matrix coef calculated. boot=FALSE, returned value subsample.size.expect equals B*n.ssp, covariance matrix estimated.","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.quantreg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimal Subsampling Methods for Quantile Regression Model — ssp.quantreg","text":"Wang, H., & Ma, Y. (2021). Optimal subsampling quantile regression big data. Biometrika, 108(1), 99-112.","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.quantreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimal Subsampling Methods for Quantile Regression Model — ssp.quantreg","text":"","code":"#quantile regression set.seed(1) N <- 1e4 B <- 5 tau <- 0.75 beta.true <- rep(1, 7) d <- length(beta.true) - 1 corr  <- 0.5 sigmax  <- matrix(0, d, d) for (i in 1:d) for (j in 1:d) sigmax[i, j] <- corr^(abs(i-j)) X <- MASS::mvrnorm(N, rep(0, d), sigmax) err <- rnorm(N, 0, 1) - qnorm(tau) Y <- beta.true[1] + X %*% beta.true[-1] +  err * rowMeans(abs(X)) data <- as.data.frame(cbind(Y, X)) colnames(data) <- c(\"Y\", paste(\"V\", 1:ncol(X), sep=\"\")) formula <- Y ~ . n.plt <- 200 n.ssp <- 100 optL.results <- ssp.quantreg(formula,data,tau = tau,n.plt = n.plt, n.ssp = n.ssp,B = B,boot = TRUE,criterion = 'optL', sampling.method = 'withReplacement',likelihood = 'weighted') summary(optL.results) #> Model Summary #>  #>  #> Call: #>  #> ssp.quantreg(formula = formula, data = data, tau = tau, n.plt = n.plt,  #>     n.ssp = n.ssp, B = B, boot = TRUE, criterion = \"optL\", sampling.method = \"withReplacement\",  #>     likelihood = \"weighted\") #>  #> Subsample Size: #> [1] 500 #>  #> Coefficients: #>  #>           Estimate Std. Error z value Pr(>|z|) #> Intercept   0.9554     0.0318 30.0568  <0.0001 #> V1          0.9926     0.0567 17.5146  <0.0001 #> V2          0.9761     0.0641 15.2257  <0.0001 #> V3          0.9800     0.0494 19.8297  <0.0001 #> V4          1.0749     0.0361 29.8075  <0.0001 #> V5          0.9890     0.0167 59.3399  <0.0001 #> V6          0.9877     0.0715 13.8179  <0.0001 uni.results <- ssp.quantreg(formula,data,tau = tau,n.plt = n.plt, n.ssp = n.ssp,B = B,boot = TRUE,criterion = 'uniform', sampling.method = 'withReplacement', likelihood = 'weighted') summary(uni.results) #> Model Summary #>  #>  #> Call: #>  #> ssp.quantreg(formula = formula, data = data, tau = tau, n.plt = n.plt,  #>     n.ssp = n.ssp, B = B, boot = TRUE, criterion = \"uniform\",  #>     sampling.method = \"withReplacement\", likelihood = \"weighted\") #>  #> Subsample Size: #> [1] 500 #>  #> Coefficients: #>  #>           Estimate Std. Error z value Pr(>|z|) #> Intercept   1.0404     0.0157 66.4117  <0.0001 #> V1          1.0048     0.0806 12.4606  <0.0001 #> V2          1.0664     0.0687 15.5237  <0.0001 #> V3          0.9842     0.0715 13.7698  <0.0001 #> V4          0.9684     0.0638 15.1784  <0.0001 #> V5          1.0856     0.0378 28.7252  <0.0001 #> V6          0.9097     0.0455 19.9756  <0.0001"},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.relogit.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimal Subsampling for Logistic Regression Model with Rare Events Data — ssp.relogit","title":"Optimal Subsampling for Logistic Regression Model with Rare Events Data — ssp.relogit","text":"Draw subsample full dataset fit logistic regression model subsample. quick start, refer vignette.","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.relogit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimal Subsampling for Logistic Regression Model with Rare Events Data — ssp.relogit","text":"","code":"ssp.relogit(   formula,   data,   subset = NULL,   n.plt,   n.ssp,   criterion = \"optL\",   likelihood = \"logOddsCorrection\",   control = list(...),   contrasts = NULL,   ... )"},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.relogit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimal Subsampling for Logistic Regression Model with Rare Events Data — ssp.relogit","text":"formula model formula object class \"formula\" describes model fitted. data data frame containing variables model. Denote \\(N\\) number observations data. subset optional vector specifying subset observations data use analysis. subset viewed full data. n.plt pilot subsample size (first-step subsample size). subsample used compute pilot estimator estimate optimal subsampling probabilities. n.ssp expected subsample size (second-step subsample size) drawn samples Y=0. rare events (Y=1) included optimal subsample automatically. criterion choices include optA, optL(default), LCC uniform. optA Minimizes trace asymptotic covariance matrix subsample estimator. optL Minimizes trace transformation asymptotic covariance matrix. computational complexity optA \\(O(N d^2)\\) optL \\(O(N d)\\). LCC Local Case-Control sampling probability, used baseline subsampling strategy. uniform Assigns equal subsampling probability \\(\\frac{1}{N}\\) observation, serving baseline subsampling strategy. likelihood likelihood function use. Options include weighted logOddsCorrection (default). bias-correction likelihood function required subsample since unequal subsampling probabilities introduce bias. weighted Applies weighted likelihood function observation weighted inverse subsampling probability. logOddsCorrection lieklihood available logistic regression model (.e., family binomial quasibinomial). uses conditional likelihood, element likelihood represents probability \\(Y=1\\), given subsample drawn. control argument control contains two tuning parameters alpha b. alpha \\(\\[0,1]\\) mixture weight user-assigned subsampling probability uniform subsampling probability. actual subsample probability \\(\\pi = (1-\\alpha)\\pi^{opt} + \\alpha \\pi^{uni}\\). protects estimator extreme small subsampling probability. default value 0. b positive number used constaint poisson subsampling probability. b close 0 results subsampling probabilities closer uniform probability \\(\\frac{1}{N}\\). b=2 default value. See relevant references details. contrasts optional list. specifies categorical variables represented design matrix. example, contrasts = list(v1 = 'contr.treatment', v2 = 'contr.sum'). ... list parameters passed svyglm().","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.relogit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimal Subsampling for Logistic Regression Model with Rare Events Data — ssp.relogit","text":"ssp.relogit returns object class \"ssp.relogit\" containing following components (optional): model.call original function call. coef.plt pilot estimator. See Details information. coef.ssp estimator obtained optimal subsample. coef weighted linear combination coef.plt coef.ssp. combination weights depend relative size n.plt n.ssp estimated covariance matrices coef.plt coef.ssp. blend pilot subsample information optimal subsample estimator since pilot subsample already drawn. coefficients standard errors reported summary coef square root diag(cov). cov.ssp covariance matrix coef.ssp. cov covariance matrix beta.cmb. index.plt Row indices pilot subsample full dataset. index.ssp Row indices optimal subsample full dataset. N number observations full dataset. subsample.size.expect expected subsample size. terms terms object fitted model.","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.relogit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimal Subsampling for Logistic Regression Model with Rare Events Data — ssp.relogit","text":"'Rare event' stands number observations \\(Y=1\\) rare compare number \\(Y=0\\) full data. face logistic regression rare events, @wang2021nonuniform shows available information ties number positive instances instead full data size. Based insight, one can keep rare instances perform subsampling non-rare instances reduce computational cost. criterion = optA, optL LCC, observations \\(Y=1\\) preserved draw n.ssp subsmples observations Y=0. criterion = uniform, draws (n.plt+n.ssp) subsmples full sample equal sampling probability. pilot estimator unknown parameter  \\(\\beta\\) required optA optL subsampling probabilities depend \\(\\beta\\). achieved drawing half size subsample rare observations half non-rare observations. arguments returned variables similar meaning ssp.glm. Refer vignette","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.relogit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimal Subsampling for Logistic Regression Model with Rare Events Data — ssp.relogit","text":"Wang, H., Zhang, ., & Wang, C. (2021). Nonuniform negative sampling log odds correction rare events data. Advances Neural Information Processing Systems, 34, 19847-19859.","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.relogit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimal Subsampling for Logistic Regression Model with Rare Events Data — ssp.relogit","text":"","code":"set.seed(1) N <- 2 * 1e4 beta0 <- c(-5, -rep(0.7, 6)) d <- length(beta0) - 1 X <- matrix(0, N, d) corr <- 0.5 sigmax <- corr ^ abs(outer(1:d, 1:d, \"-\")) sigmax <- sigmax / 4 X <- MASS::mvrnorm(n = N, mu = rep(0, d), Sigma = sigmax) Y <- rbinom(N, 1, 1 - 1 / (1 + exp(beta0[1] + X %*% beta0[-1]))) print(paste('N: ', N)) #> [1] \"N:  20000\" print(paste('sum(Y): ', sum(Y))) #> [1] \"sum(Y):  277\" n.plt <- 200 n.ssp <- 1000 data <- as.data.frame(cbind(Y, X)) colnames(data) <- c(\"Y\", paste(\"V\", 1:ncol(X), sep=\"\")) formula <- Y ~ . subsampling.results <- ssp.relogit(formula = formula,                                      data = data,                                      n.plt = n.plt,                                      n.ssp = n.ssp,                                      criterion = 'optA',                                      likelihood = 'logOddsCorrection') summary(subsampling.results) #> Model Summary #>  #>  #> Call: #>  #> ssp.relogit(formula = formula, data = data, n.plt = n.plt, n.ssp = n.ssp,  #>     criterion = \"optA\", likelihood = \"logOddsCorrection\") #>  #> Subsample Size: #>                                  #> 1       Total Sample Size  20000 #> 2 Expected Subsample Size   1277 #> 3   Actual Subsample Size   1302 #> 4   Unique Subsample Size   1302 #> 5  Expected Subample Rate 6.385% #> 6    Actual Subample Rate  6.51% #> 7    Unique Subample Rate  6.51% #>  #> Coefficients: #>  #>           Estimate Std. Error  z value Pr(>|z|) #> Intercept  -4.9647     0.0980 -50.6818  <0.0001 #> V1         -0.7250     0.1513  -4.7933  <0.0001 #> V2         -0.9808     0.1633  -6.0076  <0.0001 #> V3         -0.3470     0.1587  -2.1863   0.0288 #> V4         -0.5822     0.1638  -3.5544   0.0004 #> V5         -0.8724     0.1625  -5.3679  <0.0001 #> V6         -0.5414     0.1416  -3.8235   0.0001"},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.softmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimal Subsampling Method for Softmax (multinomial logistic) Regression Model — ssp.softmax","title":"Optimal Subsampling Method for Softmax (multinomial logistic) Regression Model — ssp.softmax","text":"Draw subsample full dataset fit softmax(multinomial logistic) regression model subsample. Refer vignette quick start.","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.softmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimal Subsampling Method for Softmax (multinomial logistic) Regression Model — ssp.softmax","text":"","code":"ssp.softmax(   formula,   data,   subset,   n.plt,   n.ssp,   criterion = \"MSPE\",   sampling.method = \"poisson\",   likelihood = \"MSCLE\",   constraint = \"summation\",   control = list(...),   contrasts = NULL,   ... )"},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.softmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimal Subsampling Method for Softmax (multinomial logistic) Regression Model — ssp.softmax","text":"formula model formula object class \"formula\" describes model fitted. data data frame containing variables model. Denote \\(N\\) number observations data. subset optional vector specifying subset observations data use analysis. subset viewed full data. n.plt pilot subsample size (first-step subsample size). subsample used compute pilot estimator estimate optimal subsampling probabilities. n.ssp expected size optimal subsample (second-step subsample). sampling.method = 'withReplacement', exact subsample size n.ssp. sampling.method = 'poisson', n.ssp expected subsample size. criterion criterion optimal subsampling probabilities. Choices include optA, optL, MSPE(default), LUC uniform. MSPE Minimizes mean squared prediction error subsample estimator full data estimator. optA Minimizes trace asymptotic covariance matrix subsample estimator. optL Minimizes trace transformation asymptotic covariance matrix, reduces computational costs optA. LUC Local uncertainty sampling method, serving baseline subsampling strategy. See Wang Kim (2022). uniform Assigns equal subsampling probability \\(\\frac{1}{N}\\) observation, serving baseline subsampling strategy. sampling.method sampling method use. Choices include withReplacement poisson(default). withReplacement draws exactly n.ssp subsamples size \\(N\\) full dataset replacement, using specified subsampling probabilities. poisson draws observations independently comparing subsampling probability realization uniform random variable  \\(U(0,1)\\). Differences methods: Sample size: withReplacement draws exactly  n.ssp subsamples poisson draws subsamples expected size n.ssp, meaning actual size may vary. Memory usage: withReplacement requires entire dataset loaded , poisson allows processing observations sequentially (implemented future version). Estimator performance: Theoretical results show poisson tends get subsample estimator lower asymptotic variance compared withReplacement likelihood bias-correction likelihood function required subsample since unequal subsampling probabilities introduce bias. Choices include weighted MSCLE(default). weighted Applies weighted likelihood function observation weighted inverse subsampling probability. MSCLE uses conditional likelihood, element likelihood represents density \\(Y_i\\) given observation drawn. constraint constraint identifiability softmax model. Choices include baseline summation(default). baseline constraint assumes coefficient baseline category \\(0\\). Without loss generality, set category \\(Y=0\\) baseline category \\(\\boldsymbol{\\beta}_0=0\\). summation constraint \\(\\sum_{k=0}^{K} \\boldsymbol{\\beta}_k\\) also used subsampling method purpose calculating subsampling probability. two constraints lead different interpretation coefficients equal computing \\(P(Y_{,k} = 1 \\mid \\mathbf{x}_i)\\). estimation coefficients returned ssp.softmax() baseline constraint. control list parameters controlling sampling process. two tuning parameters alpha b. Default list(alpha=0, b=2). alpha \\(\\[0,1]\\) mixture weight user-assigned subsampling probability uniform subsampling probability. actual subsample probability \\(\\pi = (1-\\alpha)\\pi^{opt} + \\alpha \\pi^{uni}\\). protects estimator extreme small subsampling probability. default value 0. b positive number used constaint poisson subsampling probability. b close 0 results subsampling probabilities closer uniform probability \\(\\frac{1}{N}\\). b=2 default value. See relevant references details. contrasts optional list. specifies categorical variables represented design matrix. example, contrasts = list(v1 = 'contr.treatment', v2 = 'contr.sum'). ... list parameters passed nnet::multinom().","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.softmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimal Subsampling Method for Softmax (multinomial logistic) Regression Model — ssp.softmax","text":"ssp.softmax returns object class \"ssp.softmax\" containing following components (optional): model.call original function call. coef.plt pilot estimator. See Details information. coef.ssp estimator obtained optimal subsample. coef weighted linear combination coef.plt coef.ssp, baseline constraint. combination weights depend relative size n.plt n.ssp estimated covariance matrices coef.plt coef.ssp. blend pilot subsample information optimal subsample estimator since pilot subsample already drawn. coefficients standard errors reported summary coef square root diag(cov). coef.plt.sum pilot estimator summation constrraint. coef.plt.sum = G %*% .vector(coef.plt). coef.ssp.sum estimator obtained optimal subsample summation constrraint. coef.ssp.sum = G %*% .vector(coef.ssp). coef.sum weighted linear combination coef.plt coef.ssp, summation constrraint. coef.sum = G %*% .vector(coef). cov.plt covariance matrix coef.plt. cov.ssp covariance matrix coef.ssp. cov covariance matrix coef.cmb. cov.plt.sum covariance matrix coef.plt.sum. cov.ssp.sum covariance matrix coef.ssp.sum. cov.sum covariance matrix coef.sum. index.plt Row indices pilot subsample full dataset. index.ssp Row indices optimal subsample full dataset. N number observations full dataset. subsample.size.expect expected subsample size. terms terms object fitted model.","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.softmax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimal Subsampling Method for Softmax (multinomial logistic) Regression Model — ssp.softmax","text":"pilot estimator unknown parameter  \\(\\beta\\) required MSPE, optA optL subsampling probabilities depend \\(\\beta\\). \"free lunch\" determining optimal subsampling probabilities. softmax regression, achieved drawing size n.plt subsample replacement full dataset uniform sampling probability.","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.softmax.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimal Subsampling Method for Softmax (multinomial logistic) Regression Model — ssp.softmax","text":"Yao, Y., & Wang, H. (2019). Optimal subsampling softmax regression. Statistical Papers, 60, 585-599. Han, L., Tan, K. M., Yang, T., & Zhang, T. (2020). Local uncertainty sampling large-scale multiclass logistic regression. Annals Statistics, 48(3), 1770-1788. Wang, H., & Kim, J. K. (2022). Maximum sampled conditional likelihood informative subsampling. Journal machine learning research, 23(332), 1-50. Yao, Y., Zou, J., & Wang, H. (2023). Optimal poisson subsampling softmax regression. Journal Systems Science Complexity, 36(4), 1609-1625. Yao, Y., Zou, J., & Wang, H. (2023). Model constraints independent optimal subsampling probabilities softmax regression. Journal Statistical Planning Inference, 225, 188-201.","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/ssp.softmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimal Subsampling Method for Softmax (multinomial logistic) Regression Model — ssp.softmax","text":"","code":"# softmax regression d <- 3 # dim of covariates K <- 2 # K + 1 classes G <- rbind(rep(-1/(K+1), K), diag(K) - 1/(K+1)) %x% diag(d) N <- 1e4 beta.true.baseline <- cbind(rep(0, d), matrix(-1.5, d, K)) beta.true.summation <- cbind(rep(1, d), 0.5 * matrix(-1, d, K)) set.seed(1) mu <- rep(0, d) sigma <- matrix(0.5, nrow = d, ncol = d) diag(sigma) <- rep(1, d) X <- MASS::mvrnorm(N, mu, sigma) prob <- exp(X %*% beta.true.summation) prob <- prob / rowSums(prob) Y <- apply(prob, 1, function(row) sample(0:K, size = 1, prob = row)) n.plt <- 500 n.ssp <- 1000 data <- as.data.frame(cbind(Y, X)) colnames(data) <- c(\"Y\", paste(\"V\", 1:ncol(X), sep=\"\")) head(data) #>   Y         V1          V2         V3 #> 1 2 -0.3756189 -0.17727086 -0.9816025 #> 2 2  0.2912939  0.60753208 -0.4489936 #> 3 2 -1.0530547  0.02079337 -1.0146024 #> 4 0  0.1854791  2.45385260  1.2682922 #> 5 0  0.8687332  0.21941612 -0.2810234 #> 6 1 -0.8336174 -0.32556141 -0.8505501 formula <- Y ~ . -1 WithRep.MSPE <- ssp.softmax(formula = formula,  data = data,   n.plt = n.plt,  n.ssp = n.ssp,  criterion = 'MSPE',   sampling.method = 'withReplacement',  likelihood = 'weighted',  constraint = 'baseline') #> [1] \"Message from nnet::multinom: \" #> # weights:  12 (6 variable) #> initial  value 549.306144  #> iter  10 value 367.125951 #> final  value 365.836516  #> converged #> [1] \"Message from nnet::multinom: \" #> # weights:  12 (6 variable) #> initial  value 11677047.319684  #> iter  10 value 7149711.444798 #> iter  20 value 6901692.808182 #> final  value 6901684.550943  #> converged summary(WithRep.MSPE) #> Model Summary #>  #>  #> Call: #>  #> ssp.softmax(formula = formula, data = data, n.plt = n.plt, n.ssp = n.ssp,  #>     criterion = \"MSPE\", sampling.method = \"withReplacement\",  #>     likelihood = \"weighted\", constraint = \"baseline\") #>  #> Subsample Size: #>                                 #> 1       Total Sample Size 10000 #> 2 Expected Subsample Size  1000 #> 3   Actual Subsample Size  1000 #> 4   Unique Subsample Size   927 #> 5  Expected Subample Rate   10% #> 6    Actual Subample Rate   10% #> 7    Unique Subample Rate 9.27% #>  #> Coefficients: #>  #>         [,1]      [,2] #> V1 -1.455068 -1.406786 #> V2 -1.647116 -1.492484 #> V3 -1.248385 -1.435806 #>  #> Std. Errors: #>  #>         [,1]      [,2] #> V1 0.1127325 0.1122913 #> V2 0.1133850 0.1108925 #> V3 0.1202163 0.1178532"},{"path":"https://dqksnow.github.io/subsampling/reference/subsampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimal Subsampling Methods for Statistical Models — subsampling","title":"Optimal Subsampling Methods for Statistical Models — subsampling","text":"Subsampling methods utilized statistical modeling massive datasets. methods aim draw representative subsamples full dataset based specific sampling probabilities, goal maintaining inference efficiency. sampling probabilities tailored particular objectives, minimizing variance estimated coefficients reducing prediction error. using subsampling techniques, package balances trade-computational efficiency statistical efficiency, making practical tool massive data analysis.","code":""},{"path":"https://dqksnow.github.io/subsampling/reference/subsampling.html","id":"models-supported","dir":"Reference","previous_headings":"","what":"Models Supported","title":"Optimal Subsampling Methods for Statistical Models — subsampling","text":"Generalized Linear Models (GLMs) Softmax (Multinomial) Regression Rare Event Logistic Regression Quantile Regression","code":""},{"path":[]},{"path":"https://dqksnow.github.io/subsampling/reference/subsampling.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Optimal Subsampling Methods for Statistical Models — subsampling","text":"Maintainer: Qingkai Dong qingkai.dong@uconn.edu [copyright holder] Authors: Yaqiong Yao Haiying Wang contributors: Qiang Zhang [contributor] Jun Yan [contributor]","code":""},{"path":"https://dqksnow.github.io/subsampling/news/index.html","id":"subsampling-011","dir":"Changelog","previous_headings":"","what":"subsampling 0.1.1","title":"subsampling 0.1.1","text":"CRAN release: 2024-11-05","code":""},{"path":"https://dqksnow.github.io/subsampling/news/index.html","id":"subsampling-010","dir":"Changelog","previous_headings":"","what":"subsampling 0.1.0","title":"subsampling 0.1.0","text":"Initial CRAN submission. First Version submitted CRAN. submission, updates logged .","code":""}]
